<?php

namespace App\Filament\Resources;

use App\Filament\Resources\LocationResource\Pages;
use App\Models\Location;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Dotswan\MapPicker\Fields\Map;
use Illuminate\Support\Facades\Http;

class LocationResource extends Resource
{
	protected static ?string $model = Location::class;
	protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

	public static function form(Form $form): Form
	{
		return $form->schema([
			// === Название ===
			Forms\Components\TextInput::make('name')
				->required()
				->maxLength(255),

			// === Адрес (TextInput с дебаунсом и геокодированием) ===
			Forms\Components\TextInput::make('address')
				->label('Адрес')
				->autocomplete('off')
				->live(debounce: 300)
				->afterStateUpdated(function ($state, callable $set, $livewire) {
					if (! $state || mb_strlen($state) < 3) {
						return;
					}

					$response = Http::withHeaders([
						'User-Agent' => config('app.name', 'Laravel') . ' (' . config('app.url') . ')',
					])
						->timeout(4)
						->get('https://nominatim.openstreetmap.org/search', [
							'q'               => $state,
							'format'          => 'jsonv2',
							'addressdetails'  => 1,
							'limit'           => 1,
							'accept-language' => 'ru',
						]);

					if (! ($first = $response->json()[0] ?? null)) {
						return;
					}

					$lat = $first['lat'];
					$lng = $first['lon'];

					$set('latitude', $lat);
					$set('longitude', $lng);
					$set('country', $first['address']['country'] ?? '');
					$set('city', $first['address']['city'] ?? ($first['address']['town'] ?? ($first['address']['village'] ?? '')));
					$set('coordinates', ['lat' => $lat, 'lng' => $lng]);

					$livewire->dispatch('refreshMap');
				}),

			// === Карта ===
			Map::make('coordinates')
				->label('Выбор на карте')
				->columnSpanFull()
				->defaultLocation(latitude: 50.4501, longitude: 30.5234)
				->zoom(12)
				->draggable(true)
				->clickable(true)
				->showMarker(true)
				->afterStateUpdated(function ($state, callable $set) {
					if (is_array($state)) {
						$set('latitude', $state['lat']);
						$set('longitude', $state['lng']);
					}
				})
				->afterStateHydrated(function ($state, $record, callable $set) {
					if ($record) {
						$set('coordinates', [
							'lat' => $record->latitude,
							'lng' => $record->longitude,
						]);
					}
				}),

			// === Остальные поля ===
			Forms\Components\TextInput::make('city')->maxLength(255),
			Forms\Components\TextInput::make('country')->maxLength(255),
			Forms\Components\TextInput::make('phone')->tel()->maxLength(255),

			// Рабочие часы (как ранее)
			Forms\Components\Fieldset::make('Working hours')->schema([
				Forms\Components\Grid::make(7)->schema([
					Forms\Components\TextInput::make('mon_from')->placeholder('Пн с'), Forms\Components\TextInput::make('mon_to')->placeholder('Пн по'),
					Forms\Components\TextInput::make('tue_from')->placeholder('Вт с'), Forms\Components\TextInput::make('tue_to')->placeholder('Вт по'),
					Forms\Components\TextInput::make('wed_from')->placeholder('Ср с'), Forms\Components\TextInput::make('wed_to')->placeholder('Ср по'),
					Forms\Components\TextInput::make('thu_from')->placeholder('Чт с'), Forms\Components\TextInput::make('thu_to')->placeholder('Чт по'),
					Forms\Components\TextInput::make('fri_from')->placeholder('Пт с'), Forms\Components\TextInput::make('fri_to')->placeholder('Пт по'),
					Forms\Components\TextInput::make('sat_from')->placeholder('Сб с'), Forms\Components\TextInput::make('sat_to')->placeholder('Сб по'),
					Forms\Components\TextInput::make('sun_from')->placeholder('Вс с'), Forms\Components\TextInput::make('sun_to')->placeholder('Вс по'),
				])
			]),

			// Тумблеры
			Forms\Components\Toggle::make('activate_reservation_non_working_hours')->required(),
			Forms\Components\Toggle::make('activate_custom_location_delivery')->required(),
			Forms\Components\Toggle::make('delivery_fee_pickup_return')->required(),
			Forms\Components\Toggle::make('enable_paid_return_another_location')->required(),
			Forms\Components\Toggle::make('connect_all_vehicles')->required(),

			// Координаты readonly
			Forms\Components\Grid::make(2)->schema([
				Forms\Components\TextInput::make('latitude')->readOnly()->numeric(),
				Forms\Components\TextInput::make('longitude')->readOnly()->numeric(),
			]),
		]);
	}

	public static function table(Table $table): Table
	{
		return $table
			->columns([
				Tables\Columns\TextColumn::make('name')->searchable(),
				Tables\Columns\TextColumn::make('address')->searchable(),
				Tables\Columns\TextColumn::make('city')->searchable(),
				Tables\Columns\TextColumn::make('country')->searchable(),
				Tables\Columns\TextColumn::make('phone')->searchable(),
			])
			->actions([
				Tables\Actions\EditAction::make(),
			])
			->bulkActions([
				Tables\Actions\BulkActionGroup::make([
					Tables\Actions\DeleteBulkAction::make(),
				]),
			]);
	}

	public static function getPages(): array
	{
		return [
			'index'  => Pages\ListLocations::route('/'),
			'create' => Pages\CreateLocation::route('/create'),
			'edit'   => Pages\EditLocation::route('/{record}/edit'),
		];
	}
}
